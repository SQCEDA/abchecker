// Generated from ConfigJSON.g4 by antlr-blockly

var grammarFile="grammar ConfigJSON;\r\n\r\nprog\r\n    :   '工作路径(一些配置信息将存在这里)' workDir=NormalString BGNL\r\n        '>配置已存在时可以只填工作路径并右键点加载配置' BGNL\r\n        '图片信息' BGNL imageInformation=imageInformationBlock+\r\n        '>图片信息填完后右键计算图片信息' BGNL\r\n        '图片分支' BGNL switchPosition=switchPositionBlock\r\n        '切片导出路径(初始必须是空的)' pictureOutputDir=NormalString BGNL\r\n/* prog\r\nmenu:[['保存配置','window.saveConfig?saveConfig(block):0'],['加载配置','window.loadConfig?loadConfig(block):0'],['计算图片信息','window.calculateImageInformation?calculateImageInformation(block):0'],]\r\n*/\r\n    ;\r\n\r\nimageInformationBlock\r\n    :   '目录(目录内不能包含照片外的文件和路径)' dir=NormalString BGNL\r\n        '配置文件名(建议取目录的最后一级)' config=NormalString BGNL\r\n        '坐标转换' BGNL positionTransfrom=positionTransfromBlock\r\n    ;\r\n\r\npositionTransfromBlock\r\n    :   '转换参数' 'A' A=Number 'B' B=Number 'C' C=Number 'D' D=Number 'E' E=Number 'F' F=Number\r\n    # transfromArgs\r\n/* transfromArgs\r\ndefault:['0','0','0','0','0','0']\r\n*/\r\n    |   '坐标组' BGNL\r\n        '设计图坐标 x,y 单位纳米' BGNL\r\n        '照片像素作标 m,n,p,q' BGNL\r\n        'm,n 是第m列切片, 第n行切片' BGNL\r\n        'p,q 是到左侧和顶部的像素数' BGNL\r\n        positionPair=positionPairBlock+\r\n    # positionPairs\r\n    ;\r\n\r\npositionPairBlock\r\n    :   'm' m=Number 'n' n=Number 'p' p=Number 'q' q=Number '<->' 'x' x=Number 'y' y=Number \r\n/* positionPairBlock\r\ndefault:['1','1','0','0','0','0']\r\n*/\r\n    ;\r\n\r\nswitchPositionBlock\r\n    :   '使用 x,y 代表设计图内坐标, 按照分支进入指定图片' BGNL\r\n        '0 代表不处理, 1~n 对应该编号的图片' BGNL\r\n        switchPositionAction+\r\n    ;\r\n\r\nswitchPositionAction\r\n    :   '如果' condition=conditionExpr '则:' BGNL trueCase=switchPositionAction+ \r\n        '否则' BGNL falseCase=switchPositionAction+\r\n    # ifAction\r\n    |   '图片' pictureId=Int\r\n    # returnAction\r\n    ;\r\n\r\nstatExprSplit : '=== statement ^ === expression v ===' ;\r\n\r\nconditionExpr\r\n    :   a=conditionExpr op=OP_List b=conditionExpr\r\n    # opConditionExpr\r\n    |   a=NormalString\r\n    # valueConditionExpr\r\n/* valueConditionExpr\r\ndefault : ['x >= 0']\r\n*/\r\n    ;\r\n\r\nNormalString: ('asdsaw'+)*;\r\nOP_List:    'and'|'or' ;\r\n\r\nInt :   [0-9]+ ;\r\nNumber:   'asfvaswvr'* 'asdvaswvr'? ;\r\nBool:   'true'|'false' ;\r\nColour:   'asdfgdh'* ;\r\nBGNL:   'asfvaswvr'? 'asdvaswvr'? ;\r\n\r\nMeaningfulSplit : '=== meaningful ^ ===' ;\r\n\r\n/* Insert_FunctionStart\r\nvar endBlocks=[\r\n    \"switchPositionBlock\",\r\n    \"ifAction\",\r\n    \"returnAction\",\r\n    \"transfromArgs\",\r\n    \"positionPairs\",\r\n]\r\nendBlocks.forEach(blockname => {\r\n    ConfigJSONBlocks[blockname].json.nextStatement=undefined\r\n})\r\n\r\nsetTimeout(() => {\r\n    window.blocklyInitDone?blocklyInitDone():0\r\n}, 0)\r\n*/";
var option={"type":"option","defaultGenerating":"JSON","blocklyRuntime":{"type":"blocklyRuntimeStatement","path":"antlr-blockly/","files":"blockly_compressed.js, blocks_compressed.js, javascript_compressed.js, zh-hans.js"},"blocklyDiv":{"type":"fixedSizeBlocklyDiv","id":"blocklyDiv","height":"550px","width":"1000px"},"toolbox":{"type":"toolboxDefault","id":"toolbox","gap":5},"codeArea":{"type":"codeAreaStatement","output":"function(err,data){window.setBlocklyOutput?setBlocklyOutput(err,data):document.getElementById('codeArea').innerText=err?String(err):data}"},"target":{"type":"keepGrammar"}};
option.target.type="independentFile";
var converter = Converter.withOption(grammarFile,option);
var script = document.createElement('script');
script.innerHTML = converter.js.text();
document.body.appendChild(script);
